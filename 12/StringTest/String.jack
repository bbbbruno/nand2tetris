// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int len, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let chars = Array.new(maxLength);
        let len = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (len - 1)) {
            return chars[len - 1];
        } else {
            return chars[j];
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let chars[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
            let chars[len] = null;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        var int v, i, d;

        if (chars[0] = 45) {
            let neg = true;
        } else {
            let neg = false;
        }

        let v = 0;
        if (neg) {
            let i = 1;
        } else {
            let i = 0;
        }

        while ((i < len) & isDigit(chars[i])) {
            let d = chars[i] - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }

        if (neg) {
            return -v;
        } else {
            return v;
        }
    }

    method boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        while (~(len = 0)) {
            do eraseLastChar();
        }

        if (val < 0) {
            let val = Math.abs(val);
            do appendChar(45);
        }

        do int2str(val);
        return;
    }

    method void int2str(int val) {
        var int d;
        var char c;

        let d = val - ((val / 10) * 10);
        let c = d + 48;

        if (val < 10) {
            do appendChar(c);
        } else {
            do int2str(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
