// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;
    static int SCREEN_ADDRESS;

    /** Initializes the Screen. */
    function void init() {
        var int i, n;

        let twoToThe = Array.new(16);
        let i = 0;
        let n = 1;

        while (i < 16) {
            let twoToThe[i] = n;
            let i = i + 1;
            let n = n + n;
        }
        let color = true;
        let SCREEN_ADDRESS = 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) { // (512 * 256) / 16
            do Memory.poke(SCREEN_ADDRESS + 1, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, slot, pos, val;

        let addr = 16384 + (y * 32) + (x / 16);
        let slot = Memory.peek(addr);
        let pos = x - ((x / 16) * 16); // x mod 16
        if (color) {
            let val = slot | twoToThe[pos];
        } else {
            let val = slot & ~twoToThe[pos];
        }

        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        if (dx = 0) {
            while (~(Math.abs(b) > Math.abs(dy))) {
                do Screen.drawPixel(x1, y1 + b);
                if (dy < 0) {
                    let b = b - 1;
                } else {
                    let b = b + 1;
                }
            }
            return;
        }
        if (dy = 0) {
            while (~(Math.abs(a) > Math.abs(dx))) {
                do Screen.drawPixel(x1 + a, y1);
                if (dx < 0) {
                    let a = a - 1;
                } else {
                    let a = a + 1;
                }
            }
            return;
        }

        while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                if (dx < 0) {
                    let a = a - 1;
                } else {
                    let a = a + 1;
                }
                let diff = diff + Math.abs(dy);
            } else {
                if (dy < 0) {
                    let b = b - 1;
                } else {
                    let b = b + 1;
                }
                let diff = diff - Math.abs(dx);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;

        let i = x1;
        while (~(i > x2)) {
            do Screen.drawLine(i, y1, i, y2);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;

        let dy = -r;
        while (~(dy > r)) {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - sqrt, y + dy, x + sqrt, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
