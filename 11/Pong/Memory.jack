// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList, memory;
    static int HEAPSIZE, NEXT, LENGTH, ALLOCSIZE;

    /** Initializes the class. */
    function void init() {
        var int heapBase, heapBottom;

        let heapBase = 2048;
        let heapBottom = 16383;
        let HEAPSIZE = heapBottom - heapBase + 1;
        let NEXT = 0;
        let LENGTH = 1;
        let ALLOCSIZE = -1;

        let freeList = heapBase;
        let freeList[NEXT] = null;
        let freeList[LENGTH] = HEAPSIZE;
        let memory = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prevSegment, segment, nextSegment, block;

        let segment = Memory.bestFit(size);
        let block = segment + segment[LENGTH] - size; // carve block from the segment's bottom.
        let block[ALLOCSIZE] = size + 2;
        let segment[LENGTH] = segment[LENGTH] - (size + 2); // update segment's length.

        let prevSegment = Memory.prevSegment(segment);
        let nextSegment = segment[NEXT];

        // if remained segment length < 3, remove segment from freeList.
        if (segment[LENGTH] < 3) {
            if (nextSegment = null) {
                let prevSegment[NEXT] = null;
            }
            let segment[NEXT] = null;
            let segment[LENGTH] = 0;
        }

        return block;
    }

    // finds best fit segment.
    function Array bestFit(int size) {
        var Array currentSegment, bestSegment;
        var int bestSize;

        if (freeList[NEXT] = null) {
            return freeList;
        }

        let currentSegment = freeList;
        let bestSegment = null;
        let bestSize = HEAPSIZE;

        while(~(currentSegment[NEXT] = null)) {
            let currentSegment = currentSegment[NEXT];

            if (~(currentSegment[LENGTH] < (size + 2)) & (currentSegment[LENGTH] < bestSize)) {
                let bestSegment = currentSegment;
                let bestSize = bestSegment[LENGTH];
            }
        }

        // if no bestSegment found, deFrag freeList and get the first segment.
        if (bestSegment = null) {
            do Memory.deFrag(size);
            let bestSegment = freeList;
        }

        return bestSegment;
    }

    // defragements first segment of freeList, until enough to carve (size + 2) size block.
    function void deFrag(int size) {
        var Array nextSegment;

        while(freeList[LENGTH] < (size + 2)) {
            let nextSegment = freeList[NEXT];
            let freeList[NEXT] = nextSegment[NEXT];
            let freeList[LENGTH] = freeList[LENGTH] + nextSegment[LENGTH];
            let nextSegment[NEXT] = null;
            let nextSegment[LENGTH] = 0;
        }

        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        var Array prevSegment, segment;

        let segment = object - 2;
        let segment[NEXT] = null;
        let segment[LENGTH] = object[ALLOCSIZE];
        let prevSegment = Memory.prevSegment(segment);
        let prevSegment[NEXT] = segment;

        return;
    }

    // find segment just before the given segment.
    // if given segment is freeList, return null(previous doesn't exist).
    // if cannnot find previous segment, return last segment of freeList.
    function Array prevSegment(Array segment) {
        var Array prevSegment;

        if (segment = freeList) {
            return null;
        }

        let prevSegment = freeList;

        while(~(prevSegment[NEXT] = null) & ~(prevSegment[NEXT] = segment)) {
            let prevSegment = prevSegment[NEXT];
        }

        return prevSegment;
    }
}
